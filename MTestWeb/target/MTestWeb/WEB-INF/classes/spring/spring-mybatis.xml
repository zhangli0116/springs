<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
		http://www.springframework.org/schema/beans/spring-beans-4.1.xsd
		http://www.springframework.org/schema/mvc
		http://www.springframework.org/schema/mvc/spring-mvc-4.1.xsd
		http://www.springframework.org/schema/context
		http://www.springframework.org/schema/context/spring-context-4.1.xsd
		http://www.springframework.org/schema/aop
		http://www.springframework.org/schema/aop/spring-aop-4.1.xsd
		http://www.springframework.org/schema/tx
		http://www.springframework.org/schema/tx/spring-tx-4.1.xsd ">

    <import resource="classpath:spring/spring-datasource-bonecp.xml" />

    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource" />
    </bean>

    <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <!-- 配置事务传播行为 -->
            <tx:method name="*" propagation="REQUIRED" />
        </tx:attributes>
    </tx:advice>

    <aop:config>
        <aop:pointcut id="interceptorPointCuts"
                      expression="execution(* com..*.service..*.*(..))" />
        <aop:advisor advice-ref="txAdvice"
                     pointcut-ref="interceptorPointCuts" order="1"/>
        <!-- schemaAspectJExample 通过@Component注解 -->
        <!-- <aop:aspect id="myAspect" ref="schemaAspectJExample" order="1">
            <aop:pointcut expression="execution(* com..*.service..*.*(..))" id="schemaAspectJPointCut"/>
            <aop:before pointcut-ref="schemaAspectJPointCut"  method="monitor"/>
        </aop:aspect>   -->
    </aop:config>

    <aop:aspectj-autoproxy/>

    <!-- mapper配置 -->
    <!-- 让spring管理sqlsessionfactory 使用mybatis和spring整合包中的 -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <!-- 数据库连接池 -->
        <property name="dataSource" ref="dataSource" />
        <!-- 加载mybatis的全局配置文件 -->
        <property name="configLocation" value="classpath:mybatis/SqlMapConfig.xml" />
        <!-- 如果Mapper.xml与Mapper.class在同一个包下且同名，spring扫描Mapper.class的同时会自动扫描同名的Mapper.xml并装配到Mapper.class。
如果Mapper.xml与Mapper.class不在同一个包下或者不同名，就必须使用配置mapperLocations指定mapper.xml的位置 -->
        <!--xml需要在pom中配置，以至于打包war时能够包含进去-->
        <property name="mapperLocations" value="classpath:com/frame/springmvc/mapper/xml/*.xml"/>
        <!-- 拦截插件 -->
        <property name="plugins">
            <array>
                <bean class="com.frame.springmvc.interceptor.SQLInterceptor" />
            </array>
        </property>
        <!--
        定义常量，在dao.xml中用${xx}可取
        <property name="configurationProperties">
            <props>
            <prop key="xx">xxx</prop>
            </props>
        </property>
         -->
    </bean>
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <!-- 不需要写成com.mapper.*，错误，下面写法就会扫描mapper包下所有，如果有多个包，使用半角逗号分隔 -->
        <property name="basePackage" value="com.frame.springmvc.mapper"/>
        <!-- sqlSessionFactoryBeanName ？ -->
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
    </bean>
</beans>